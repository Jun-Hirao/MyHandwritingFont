├── .github
    ├── ISSUE_TEMPLATE
    │   └── FEATURE_REQUEST.md
    └── PULL_REQUEST_TEMPLATE.md
├── .gitignore
├── CODING_GUIDELINES.md
├── LICENSE
├── PROJECT_STRUCTURE.md
├── README.md
├── assets
    └── .gitkeep
├── docs
    └── source
    │   ├── conf.py
    │   └── index.rst
├── pyproject.toml
├── requirements.txt
├── scripts
    └── validate_structure.py
├── src
    └── myhandwritingfont
    │   ├── __init__.py
    │   ├── drawing.py
    │   ├── fontgen.py
    │   ├── main.py
    │   └── subpackage
    │       ├── __init__.py
    │       └── module_sub.py
└── tests
    ├── __init__.py
    ├── conftest.py
    ├── integration
        ├── __init__.py
        └── test_integration.py
    └── test_module1.py


/.github/ISSUE_TEMPLATE/FEATURE_REQUEST.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | name: 機能要望
 3 | about: 機能追加・削除要望などを行いたい時にはこちら
 4 | title: "○○機能の実装"
 5 | labels: enhancement
 6 | 
 7 | ---
 8 | 
 9 | <!--
10 | タイトル例:○○機能の実装、○○機能の削除
11 | -->
12 | 
13 | # 概要
14 | わかりやすく何をしたいかを記載してください。あれば画像があると分かりやすいです。
15 | <!--
16 | 例:実行報告メールを送るアクティビティを実装したい。
17 | -->
18 | - 概要
19 | 
20 | # 目的(WHY)
21 | 機能追加による目的を記載してください。
22 | - 目的
23 | 
24 | 
25 | # このissueのClose条件(WHAT)
26 | なるべく具体的に完了条件を記載してください。
27 | <!--
28 | 例:○○の機能を実装し、実行を確認する。
29 | -->
30 | - 完了条件1
31 | 
32 | # タスク
33 | タスクまで分解できていれば記載してください。issueがタスクにある場合はリンクしてください。
34 | - [ ] タスク1
35 | 
36 | 
37 | # その他
38 | 参考資料のURLやメモ等あれば記載してください。
39 | 
40 | # 関連issue
41 | <!--
42 | あれば「無し」の行を消して#0のようにリンクさせる。
43 | -->
44 | - [x] 無し
45 | 
46 | 


--------------------------------------------------------------------------------
/.github/PULL_REQUEST_TEMPLATE.md:
--------------------------------------------------------------------------------
 1 | ## Plannerタスク・GitHubのissueへのリンク
 2 | <!--
 3 | #1のようにするとissueはリンクできる。close #1のようにするとclosedできる。
 4 | -->
 5 | - https://example.com
 6 | 
 7 | ## やったこと(WHAT)
 8 | このプルリクエストで何をしたのか？
 9 | - やったこと
10 | 
11 | ## なぜやったのか(WHY)
12 | Plannerタスク・issueで説明できない捕捉的な事項
13 | <!--
14 | (タスク・issue上の説明で十分であれば「タスク(issue)通りと記載」)
15 | なぜ必要と考えたかの説明があるとレビュワーがわかりやすい。
16 | -->
17 | - なぜやったのか
18 | 
19 | ## やらないこと(NOT)
20 | このプルリクエストでやらないことは何か？
21 | <!--
22 | （あれば。無いなら「無し」でOK）（やらない場合は、いつやるのかを明記する。）
23 | -->
24 | - 無し
25 | 
26 | ## できるようになること（ユーザ目線）
27 | 何ができるようになるのか？
28 | <!--
29 | （あれば。無いなら「無し」でOK）
30 | -->
31 | - できるようになること1
32 | 
33 | ## できなくなること（ユーザ目線）
34 | 何ができなくなるのか？
35 | <!--
36 | （あれば。無いなら「無し」でOK）
37 | -->
38 | - 無し
39 | 
40 | ## 動作確認(テスト)
41 | ### どの環境で行ったか
42 | - 環境1
43 | 
44 | ### どのような動作確認を行ったのか？結果はどうか？
45 | #### 動作確認
46 | - 動作確認1
47 | 
48 | #### 結果
49 | <!--
50 | スクリーンショットがあると分かりやすい
51 | -->
52 | - 結果1
53 | 
54 | ## その他
55 | レビュワーへの参考情報（実装上の懸念点や注意点、関連するプルリクエスト、Plannerタスクやissueなどあれば記載）
56 | - 参考情報1
57 | 


--------------------------------------------------------------------------------
/.gitignore:
--------------------------------------------------------------------------------
1 | # Byte-compiled / optimized / DLL files
2 | __pycache__/
3 | *.py[cod]
4 | output/


--------------------------------------------------------------------------------
/CODING_GUIDELINES.md:
--------------------------------------------------------------------------------
 1 | # コーディング規約
 2 | 
 3 | ## 1. コードの構造
 4 | - **ファイル名**: 使用するプログラム言語の慣例にしたがう。一般的には小文字で、単語間はアンダースコアで区切ることが推奨される。
 5 | 
 6 | ### Python
 7 | - **ファイル名構造**: 小文字のみ、アンダースコアで単語を区切る。
 8 | - **例**: `my_script.py`, `data_loader.py`
 9 | 
10 | ## 2. コーディングスタイル
11 | - **インデント**: スペース4つでインデントを統一する。
12 | - **行の長さ**: 1行は80文字以内に収める。
13 | - **ブレースの位置**（JavaScriptの場合）: ブレースは同じ行に置く（例: `if (condition) {`）。
14 | - **読みやすさ**: 意味のある変数名を用い、複雑なロジックは関数に分けること。
15 | - **エラー時の早期リターンを意識**: エラーが発生した場合は、早期にリターンするパターンを使用して、ネストを減らしコードの可読性を向上させること。
16 | 
17 | ## 3. コメント
18 | - **関数のコメント**: 各関数には、引数の説明と戻り値の説明を含めること。
19 | - **重要なロジック**: 複雑な処理には詳細なコメントを追加する。
20 | - **日本語でコメントすること**: プロジェクト内の全てのコメントは日本語で記述すること。
21 | 
22 | ## 4. バージョン管理（GitHub）
23 | - **GitHubを使用**: バージョン管理はGitHubを使用し、コミットメッセージは以下のパターンに従うこと。#0はissueナンバーと対応すること。具体的で分かりやすい簡潔なコミットメッセージにすること。
24 |     ```
25 |     feat: ✨ #0 機能の追加や変更
26 |     fix: 🐛 #0 バグやエラーの修正
27 |     test: ✅ #0 テストコードに関する変更
28 |     chore: 🧹 #0 依存関係の更新
29 |     construction: 🚧 #0 WIP(作業途中)
30 |     fire: 🔥 #0 メソッドやファイルの削除
31 |     docs: 📝 #0 ドキュメントの作成、修正、更新
32 |     refactor: ♻️ #0 リファクタリング
33 |     style: 👕 #0 空白、セミコロン、行、コーディングフォーマットなどの修正
34 |     ```
35 | - **ブランチ戦略**: GitHub-Flowを採用し、新機能や修正ごとにブランチを作成する。ブランチ名は以下のパターンに従うこと。#0はissueナンバーと対応すること。contentは機能の内容に応じて変更すること。
36 |     ```
37 |     feature-#0-content
38 |     fix-#0-content
39 |     ```
40 | - **ユニットテスト**: 開発した機能ごとにユニットテストを作成すること。
41 | - **テストカバレッジ**: コードの70%以上をテストでカバーすることを目指す。
42 | - **Pythonテストフレームワーク**: Pythonの場合、pytestを主に使用する。
43 | 
44 | ## 6. フレームワークに関するポリシー
45 | - **Flask**: アプリケーション設定は`config.py`にまとめ、環境ごとに分けること。
46 | - **React**: コンポーネントは一貫性のある命名規則で、CSS ModulesやStyled Componentsを利用すること。
47 | - **Node.js**: 環境変数を使用して設定情報を管理し、エラーハンドリングを適切に行うこと。
48 | 
49 | ## 7. セキュリティに関するベストプラクティス
50 | - **入力のサニタイズ**: ユーザーからの入力は必ずサニタイズし、不正なデータを除外すること。
51 | - **認証と認可**: セッション管理やトークンベース認証を使用し、アクセスの制御を行うこと。
52 | - **依存関係のチェック**: npmやpipのセキュリティ監査ツールを使用して、依存関係の脆弱性を定期的にチェックすること。
53 | - **HTTPS**: アプリケーションは常にHTTPSを介して通信し、データの安全性を保つこと。
54 | 


--------------------------------------------------------------------------------
/LICENSE:
--------------------------------------------------------------------------------
 1 | MIT License
 2 | 
 3 | Copyright (c) 2025 Jun Hirao
 4 | 
 5 | Permission is hereby granted, free of charge, to any person obtaining a copy
 6 | of this software and associated documentation files (the "Software"), to deal
 7 | in the Software without restriction, including without limitation the rights
 8 | to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 9 | copies of the Software, and to permit persons to whom the Software is
10 | furnished to do so, subject to the following conditions:
11 | 
12 | The above copyright notice and this permission notice shall be included in all
13 | copies or substantial portions of the Software.
14 | 
15 | THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
16 | IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
17 | FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
18 | AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
19 | LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
20 | OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
21 | SOFTWARE.


--------------------------------------------------------------------------------
/PROJECT_STRUCTURE.md:
--------------------------------------------------------------------------------
  1 | # ディレクトリ構造
  2 | ```
  3 | this-repository/  
  4 | ├── .github/  
  5 | │   ├── workflows/  
  6 | │   │   └── validate-structure.yml  
  7 | │   └── ISSUE_TEMPLATE/  
  8 | │       └── FEATURE_REQUEST.md  
  9 | ├── src/  
 10 | │   └── [package_name]/  
 11 | │       ├── __init__.py  
 12 | │       ├── main.py  
 13 | │       ├── drawing.py  
 14 | │       └── fontgen.py  
 15 | ├── output/  
 16 | ├── assets/  
 17 | ├── tests/  
 18 | │   ├── conftest.py  
 19 | │   ├── __init__.py 
 20 | │   ├── test_module1.py  
 21 | │   └── integration/  
 22 | │       ├── __init__.py
 23 | │       └── test_integration.py  
 24 | ├── scripts/  
 25 | │   ├── validate_structure.py  
 26 | │   └── other_tools.py 
 27 | ├── .gitignore  
 28 | ├── pyproject.toml  
 29 | ├── requirements.txt
 30 | ├── README.md
 31 | ├── CODING_GUIDELINES.md
 32 | ├── PROJECT_STRUCTURE.md
 33 | └── LICENSE
 34 | 
 35 | ```
 36 | # 各ディレクトリとファイルの説明
 37 | 
 38 | ## this-repository/
 39 | プロジェクトのルートディレクトリ。すべての設定ファイルと主要ディレクトリを含みます。
 40 | 
 41 | ### .github/
 42 | GitHub関連の設定ファイルを格納します。
 43 | 
 44 | #### workflows/
 45 | - **validate-structure.yml**: CI/CDパイプラインの設定ファイル。プッシュ/プルリクエスト時に構造検証スクリプトを実行
 46 | - その他のワークフロー（テスト、デプロイなど）を追加可能
 47 | 
 48 | #### ISSUE_TEMPLATE/
 49 | - **機能要望.md**: 機能要望用のテンプレート
 50 | - その他のテンプレート（質問用、ドキュメント改善用など）を追加可能
 51 | 
 52 | ### src/
 53 | メインのPythonパッケージコードを格納します。
 54 | #### **[package_name]/**
 55 | **プロジェクトのメインパッケージディレクトリです。通常、パッケージ名はプロジェクト名と同じにします。  **
 56 |   - `__init__.py`: パッケージの初期化ファイル
 57 |   - `module1.py`: 機能ごとに分割したモジュール例。モジュールは機能別に分割して配置します。  
 58 |   - サブパッケージは別ディレクトリに分割
 59 |   - **subpackage/**: より細かい機能やドメインごとに分割するためのサブパッケージ。  
 60 |     - `__init__.py`: サブパッケージの初期化ファイル。  
 61 |     - `module_sub.py`: サブパッケージ内のモジュール例。
 62 | 
 63 | ### output/
 64 | 手書きした文字のPNGや生成した.ttfを出力するフォルダです。
 65 | 
 66 | ### assets/
 67 | アプリのアイコンなどの静的ファイルを保存するフォルダです。
 68 | 
 69 | ### tests/
 70 | 単体テスト、統合テスト、エンドツーエンドテストなど、テストコード全般を配置します。
 71 | 
 72 | - `conftest.py`: pytestのフィクスチャなど、共通のテスト設定を記述します。  
 73 | - `__init__.py`: テストコードをパッケージとして扱う場合に配置します（必須ではありません）。  
 74 | - `test_module1.py`: 対象モジュールに対する単体テスト。  
 75 | #### integration/
 76 | 統合テストやシステム全体のテストを配置するディレクトリ。  
 77 | 
 78 | - `__init__.py`: 統合テストのパッケージ化用（必要に応じて）。  
 79 | - `test_integration.py`: 統合テストの例。
 80 | 
 81 | 
 82 | ### scripts/
 83 | 開発支援用のスクリプト類を格納します。
 84 | - **validate_structure.py**: CI/CDやローカルでプロジェクトのディレクトリ構造を検証するためのスクリプト。
 85 | - **other_tools.py**: その他、開発やデプロイ、データ生成などで使用するツール類を配置してください。
 86 | 
 87 | ### 主要ファイル(ルート直下) 
 88 | - **.gitignore**: Gitで管理しないファイルやディレクトリを指定します。
 89 | - **LICENSE**: プロジェクトに適用するライセンス文書ファイル。
 90 | - **README.md**: プロジェクト概要説明、プロジェクトの仕様、セットアップ手順、使用方法、依存関係などを記載します。
 91 | - **CODING_GUIDELINES.md**: コーディング規約を記載します。
 92 | - **PROJECT_STRUCTURE.md**: 本ファイル。プロジェクトのディレクトリ構造とその説明を記載します。 
 93 | 
 94 | ### 主要ファイル(Python)
 95 | - **requirements.txt**: Pythonの依存パッケージの一覧を記述します。
 96 | - **pyproject.toml**: PEP 518準拠のビルドシステム設定ファイルです。
 97 | 
 98 | # ディレクトリ規約と運用ルール
 99 | 
100 | 1. **新規追加時のルール**  
101 |    - 新しいモジュール、テスト、ドキュメント、スクリプトを追加する場合は、本規約に則り適切なディレクトリに配置してください。  
102 |    - ディレクトリ階層やファイル名は、一貫性をもって命名してください（例：テストファイルは`test_*.py`とするなど）。
103 | 
104 | 2. **変更時のルール**  
105 |    - ディレクトリ構造やファイル配置に変更が必要な場合は、チーム内で議論し、合意の上で本ファイル（PROJECT_STRUCTURE.md）を更新してください。  
106 |    - 大きな変更の場合は、GitHubのIssueやPull Requestを通じてレビューを実施してください。
107 | 
108 | 3. **CI/CDでの検証**  
109 |    - `.github/workflows/validate-structure.yml`などを用いて、プッシュ時やプルリクエスト時にプロジェクト構造が規約に従っているか自動検証を実施することを推奨します。  
110 |    - ローカルでも`scripts/validate_structure.py`を実行して、規約遵守を確認できるようにしてください。
111 | 
112 | 
113 | ---
114 | 
115 | # 備考
116 | 
117 | - **パッケージ名のプレースホルダ `[package_name]`**  
118 |   実際のプロジェクト作成時には、プロジェクト名に合わせたディレクトリ名に置き換えてください。
119 | 
120 | - **テストの構造**  
121 |   単体テストと統合テストを明確に分けることで、テスト実行時の設定や依存関係管理を容易にしています。必要に応じてE2Eテスト等のディレクトリを追加してください。
122 | 
123 | - **CI/CDの運用**  
124 |   GitHub Actionsやその他のCIツールを活用して、コードの品質チェックやテスト自動実行、ディレクトリ構造の検証を行い、品質維持に努めてください。
125 | 


--------------------------------------------------------------------------------
/README.md:
--------------------------------------------------------------------------------
 1 | ## アプリ名: MyHandwritingFont
 2 | 
 3 | ## アプリの仕様
 4 | **概要**
 5 | 自分の手書き文字をフォントに変換するアプリです。ペンタブやマウスで文字を書いて、それをデジタルフォント（.ttf形式）に変換することで、手書き風の履歴書などに利用できます。対応OSはWindowsです。
 6 | 
 7 | ### インストール
 8 | 1. リポジトリをクローン: `git clone https://github.com/Jun-Hirao/MyHandwritingFont.git`
 9 | 2. 依存関係をインストール: `pip install -r requirements.txt`
10 | 3. 実行: `python src/myhandwritingfont/main.py`
11 | 
12 | ### 使い方
13 | 1. アプリ起動したら、キャンバスに1文字手書き。
14 | 2. 保存ボタンでPNGに保存。
15 | 3. フォント生成ボタンで.ttfファイルが`output/`に出力されます。
16 | 4. 生成されたttfをPCにインストールする等でご利用できます。
17 | 
18 | ## 開発環境
19 | - Windows11(23H2)
20 | - pyenv-win
21 | - Python 3.11.9
22 | - venv
23 | 
24 | 
25 | ## コーディング規約
26 | コーディング規約はリポジトリ直下の [CODING_GUIDELINES.md](CODING_GUIDELINES.md) で定義されています。
27 | 変更する場合はレビューが必要です。
28 | 
29 | ## ディレクトリ構造
30 | ディレクトリ構造はリポジトリ直下の [PROJECT_STRUCTURE.md](PROJECT_STRUCTURE.md) で定義されています。
31 | 変更する場合はレビューが必要です。
32 | 
33 | ## ライセンス
34 | MIT ライセンスです。詳細は [LICENSE](LICENSE) を参照してください。
35 | 
36 | 


--------------------------------------------------------------------------------
/assets/.gitkeep:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/Jun-Hirao/MyHandwritingFont/336d5afe2eb1457edbde00810bd424e5a134d841/assets/.gitkeep


--------------------------------------------------------------------------------
/docs/source/conf.py:
--------------------------------------------------------------------------------
1 | # Sphinx configuration file
2 | 
3 | project = 'Your Project Name'
4 | extensions = []
5 | 


--------------------------------------------------------------------------------
/docs/source/index.rst:
--------------------------------------------------------------------------------
1 | Your Project Name
2 | =================
3 | 
4 | Welcome to the documentation!
5 | 


--------------------------------------------------------------------------------
/pyproject.toml:
--------------------------------------------------------------------------------
1 | # pyproject.toml - Build system configuration
2 | 


--------------------------------------------------------------------------------
/requirements.txt:
--------------------------------------------------------------------------------
1 | Pillow>=10.0.0
2 | fontforge
3 | cairosvg>=2.7.0


--------------------------------------------------------------------------------
/scripts/validate_structure.py:
--------------------------------------------------------------------------------
  1 | #!/usr/bin/env python3
  2 | # 使い方：$ python scripts/validate_structure.py
  3 | import os
  4 | import sys
  5 | 
  6 | def check_path(path, *, is_dir=False, required=True):
  7 |     """
  8 |     指定パスが存在するかどうかをチェックする。
  9 |     :param path: チェック対象のパス
 10 |     :param is_dir: ディレクトリであることを期待する場合 True を指定
 11 |     :param required: 存在しない場合にエラーとする場合 True
 12 |     :return: 存在していれば True、存在しなければ False
 13 |     """
 14 |     if is_dir:
 15 |         exists = os.path.isdir(path)
 16 |     else:
 17 |         exists = os.path.isfile(path)
 18 |     if not exists and required:
 19 |         kind = "directory" if is_dir else "file"
 20 |         print(f"Error: Expected {kind} '{path}' not found.")
 21 |     return exists
 22 | 
 23 | def check_structure():
 24 |     errors = False
 25 |     base = os.getcwd()  # スクリプト実行時のカレントディレクトリをリポジトリルートとする
 26 | 
 27 |     print("Starting directory structure validation...\n")
 28 | 
 29 |     # 1. .github 配下のチェック
 30 |     github_dir = os.path.join(base, ".github")
 31 |     if not os.path.isdir(github_dir):
 32 |         print("Error: .github directory not found.")
 33 |         errors = True
 34 |     else:
 35 |         # workflows/validate-structure.yml
 36 |         workflows_dir = os.path.join(github_dir, "workflows")
 37 |         if not check_path(workflows_dir, is_dir=True):
 38 |             errors = True
 39 |         else:
 40 |             workflow_file = os.path.join(workflows_dir, "validate-structure.yml")
 41 |             if not check_path(workflow_file):
 42 |                 errors = True
 43 | 
 44 |         # ISSUE_TEMPLATE/BUG_REPORT.md, FEATURE_REQUEST.md
 45 |         issue_template_dir = os.path.join(github_dir, "ISSUE_TEMPLATE")
 46 |         if not check_path(issue_template_dir, is_dir=True):
 47 |             errors = True
 48 |         else:
 49 |             for template in ["BUG_REPORT.md", "FEATURE_REQUEST.md"]:
 50 |                 template_path = os.path.join(issue_template_dir, template)
 51 |                 if not check_path(template_path):
 52 |                     errors = True
 53 | 
 54 |     # 2. src/ 配下のチェック
 55 |     src_dir = os.path.join(base, "src")
 56 |     if not check_path(src_dir, is_dir=True):
 57 |         errors = True
 58 |     else:
 59 |         # [package_name] ディレクトリを特定（src内で __init__.py を持つ最初のディレクトリ）
 60 |         package_dir = None
 61 |         for entry in os.listdir(src_dir):
 62 |             entry_path = os.path.join(src_dir, entry)
 63 |             if os.path.isdir(entry_path) and check_path(os.path.join(entry_path, "__init__.py"), required=False):
 64 |                 package_dir = entry_path
 65 |                 package_name = entry  # パッケージ名として利用
 66 |                 break
 67 |         if not package_dir:
 68 |             print("Error: No Python package directory found in src (directory with __init__.py).")
 69 |             errors = True
 70 |         else:
 71 |             # package内の module1.py の存在確認
 72 |             module1 = os.path.join(package_dir, "module1.py")
 73 |             if not check_path(module1):
 74 |                 errors = True
 75 | 
 76 |             # subpackage のチェック
 77 |             subpackage_dir = os.path.join(package_dir, "subpackage")
 78 |             if not check_path(subpackage_dir, is_dir=True):
 79 |                 errors = True
 80 |             else:
 81 |                 # __init__.py のチェック
 82 |                 sub_init = os.path.join(subpackage_dir, "__init__.py")
 83 |                 if not check_path(sub_init):
 84 |                     errors = True
 85 |                 # module_sub.py のチェック（仕様に合わせて必須の場合）
 86 |                 module_sub = os.path.join(subpackage_dir, "module_sub.py")
 87 |                 if not check_path(module_sub):
 88 |                     errors = True
 89 | 
 90 |     # 3. tests/ 配下のチェック
 91 |     tests_dir = os.path.join(base, "tests")
 92 |     if not check_path(tests_dir, is_dir=True):
 93 |         errors = True
 94 |     else:
 95 |         # 共通テスト設定ファイル
 96 |         for test_file in ["conftest.py", "test_module1.py"]:
 97 |             if not check_path(os.path.join(tests_dir, test_file)):
 98 |                 errors = True
 99 | 
100 |         # integration テストディレクトリ
101 |         integration_dir = os.path.join(tests_dir, "integration")
102 |         if not check_path(integration_dir, is_dir=True):
103 |             errors = True
104 |         else:
105 |             for int_file in ["__init__.py", "test_integration.py"]:
106 |                 if not check_path(os.path.join(integration_dir, int_file)):
107 |                     errors = True
108 | 
109 | 
110 |     # 4. scripts/ 配下のチェック
111 |     scripts_dir = os.path.join(base, "scripts")
112 |     if not check_path(scripts_dir, is_dir=True):
113 |         errors = True
114 |     else:
115 |         # このスクリプト自身が scripts/ に存在することをチェック
116 |         current_script = os.path.basename(__file__)
117 |         script_path = os.path.join(scripts_dir, current_script)
118 |         if not os.path.isfile(script_path):
119 |             print(f"Error: Expected file '{current_script}' in scripts directory not found.")
120 |             errors = True
121 | 
122 |     # 5. ルート直下の主要ファイルチェック
123 |     root_files = [
124 |         ".gitignore",
125 |         "pyproject.toml",
126 |         "requirements.txt",
127 |         "README.md",
128 |         "CODING_GUIDELINES.md",
129 |         "PROJECT_STRUCTURE.md",
130 |         "LICENSE"
131 |     ]
132 |     for rf in root_files:
133 |         if not check_path(os.path.join(base, rf)):
134 |             errors = True
135 | 
136 |     print()  # 空行で区切り
137 | 
138 |     if errors:
139 |         print("Directory structure validation FAILED.")
140 |         sys.exit(1)
141 |     else:
142 |         print("Directory structure validation PASSED.")
143 |         sys.exit(0)
144 | 
145 | if __name__ == "__main__":
146 |     check_structure()
147 | 


--------------------------------------------------------------------------------
/src/myhandwritingfont/__init__.py:
--------------------------------------------------------------------------------
1 | # your_package package initialization
2 | __version__ = "0.1.0"


--------------------------------------------------------------------------------
/src/myhandwritingfont/drawing.py:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/Jun-Hirao/MyHandwritingFont/336d5afe2eb1457edbde00810bd424e5a134d841/src/myhandwritingfont/drawing.py


--------------------------------------------------------------------------------
/src/myhandwritingfont/fontgen.py:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/Jun-Hirao/MyHandwritingFont/336d5afe2eb1457edbde00810bd424e5a134d841/src/myhandwritingfont/fontgen.py


--------------------------------------------------------------------------------
/src/myhandwritingfont/main.py:
--------------------------------------------------------------------------------
1 | # module1.py
2 | 
3 | def sample_function():
4 |     """サンプル関数"""
5 |     pass
6 | 


--------------------------------------------------------------------------------
/src/myhandwritingfont/subpackage/__init__.py:
--------------------------------------------------------------------------------
1 | # subpackage initialization
2 | 


--------------------------------------------------------------------------------
/src/myhandwritingfont/subpackage/module_sub.py:
--------------------------------------------------------------------------------
1 | # module_sub.py in subpackage
2 | 
3 | def sub_function():
4 |     """サブパッケージ内のサンプル関数"""
5 |     pass
6 | 


--------------------------------------------------------------------------------
/tests/__init__.py:
--------------------------------------------------------------------------------
1 | # tests パッケージ初期化
2 | 


--------------------------------------------------------------------------------
/tests/conftest.py:
--------------------------------------------------------------------------------
1 | # pytest 共通フィクスチャ設定
2 | 


--------------------------------------------------------------------------------
/tests/integration/__init__.py:
--------------------------------------------------------------------------------
1 | # integration tests 初期化
2 | 


--------------------------------------------------------------------------------
/tests/integration/test_integration.py:
--------------------------------------------------------------------------------
1 | def test_integration_sample():
2 |     # TODO: 統合テストを実装
3 |     assert True
4 | 


--------------------------------------------------------------------------------
/tests/test_module1.py:
--------------------------------------------------------------------------------
1 | def test_sample_function():
2 |     # TODO: module1.py のテストを実装
3 |     assert True
4 | 


--------------------------------------------------------------------------------